name: Terraform & Dotnet Deployment Workflow

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      resourcetype:
        description: 'resourcetype to deploy (e.g., VM , Webapp)'
        required: true
        default: 'vm'  # Default value for resourcetype input
      environment:
        description: 'Environment to deploy (e.g., dev, prod)'
        required: false
        default: 'dev'  # Default value for environment input
      appname:
        description: 'The Azure Web App name for deployment'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: ${{ github.workspace }}/terraform/modules/${{ github.event.inputs.resourcetype }}  # Correct working directory
      GO_VERSION: '1.21.0'
      TF_VERSION: '1.3.5'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: List Working Directory
        run: |
          echo "Listing the contents of the working directory..."
          ls -al $GITHUB_WORKSPACE

      - name: Setup Azure Login using Service Principal
        run: |
          # Login to Azure using service principal
          az login --service-principal \
            -u a2d89136-b086-4755-9f98-af856c2d8c30 \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant 13085c86-4bcb-460a-a6f0-b373421c6323
            
      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Terraform ${{ env.TF_VERSION }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Clean Go Cache
        run: |
          echo "Cleaning Go Cache..."
          go clean -modcache

      - name: Terraform Init
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

      - name: Terraform Validate
        run: |
          terraform -chdir=${{ env.TF_WORKING_DIR }} validate

      - name: Terraform Plan
        run: |
          echo "Running Terraform Plan with environment-specific tfvars..."
          ENV_TFVARS="terraform/environments/${{ github.event.inputs.environment }}/terraform.tfvars"
          terraform -chdir=${{ env.TF_WORKING_DIR }} plan -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}" -out=tfplan -var-file=${{ github.workspace }}/${ENV_TFVARS}

      - name: Terraform Apply
        run: |
          echo "Applying Terraform Plan..."
          ENV_TFVARS="terraform/environments/${{ github.event.inputs.environment }}/terraform.tfvars"
          # Apply with correct path to tfvars file
          terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve -var-file=${{ github.workspace }}/${ENV_TFVARS} -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"

      - name: Remove terraform.lock.hcl
        run: |
          echo "Removing terraform.lock.hcl after applying..."
          rm -f ${{ env.TF_WORKING_DIR }}/terraform.lock.hcl  
